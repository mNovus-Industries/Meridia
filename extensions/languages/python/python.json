{
  "keywords": [
    "False",
    "None",
    "True",
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "nonlocal",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
  ],
  "builtins": [
    "ArithmeticError",
    "AssertionError",
    "AttributeError",
    "BaseException",
    "BlockingIOError",
    "BrokenPipeError",
    "BufferError",
    "BytesWarning",
    "ChildProcessError",
    "ConnectionAbortedError",
    "ConnectionError",
    "ConnectionRefusedError",
    "ConnectionResetError",
    "DeprecationWarning",
    "EOFError",
    "Ellipsis",
    "EnvironmentError",
    "Exception",
    "FileExistsError",
    "FileNotFoundError",
    "FloatingPointError",
    "FutureWarning",
    "GeneratorExit",
    "IOError",
    "ImportError",
    "ImportWarning",
    "IndentationError",
    "IndexError",
    "InterruptedError",
    "IsADirectoryError",
    "KeyError",
    "KeyboardInterrupt",
    "LookupError",
    "MemoryError",
    "ModuleNotFoundError",
    "NameError",
    "NotADirectoryError",
    "NotImplemented",
    "NotImplementedError",
    "OSError",
    "OverflowError",
    "PendingDeprecationWarning",
    "PermissionError",
    "ProcessLookupError",
    "RecursionError",
    "ReferenceError",
    "ResourceWarning",
    "RuntimeError",
    "RuntimeWarning",
    "StopAsyncIteration",
    "StopIteration",
    "SyntaxError",
    "SyntaxWarning",
    "SystemError",
    "SystemExit",
    "TabError",
    "TimeoutError",
    "TypeError",
    "UnboundLocalError",
    "UnicodeDecodeError",
    "UnicodeEncodeError",
    "UnicodeError",
    "UnicodeTranslateError",
    "UnicodeWarning",
    "UserWarning",
    "ValueError",
    "Warning",
    "ZeroDivisionError",
    "__import__",
    "abs",
    "all",
    "any",
    "ascii",
    "bin",
    "bool",
    "breakpoint",
    "bytearray",
    "bytes",
    "callable",
    "chr",
    "classmethod",
    "compile",
    "complex",
    "copyright",
    "credits",
    "delattr",
    "dict",
    "dir",
    "divmod",
    "enumerate",
    "eval",
    "exec",
    "exit",
    "filter",
    "float",
    "format",
    "frozenset",
    "getattr",
    "globals",
    "hasattr",
    "hash",
    "help",
    "hex",
    "id",
    "input",
    "int",
    "isinstance",
    "issubclass",
    "iter",
    "len",
    "license",
    "list",
    "locals",
    "map",
    "max",
    "memoryview",
    "min",
    "next",
    "object",
    "oct",
    "open",
    "ord",
    "pow",
    "print",
    "property",
    "quit",
    "range",
    "repr",
    "reversed",
    "round",
    "set",
    "setattr",
    "slice",
    "sorted",
    "staticmethod",
    "str",
    "sum",
    "super",
    "tuple",
    "type",
    "vars",
    "zip"
  ],
  "snippets": {
    "print": {
      "prefix": "print",
      "body": "print('${1:}')",
      "description": "Print a message."
    },
    "forLoop": {
      "prefix": "forLoop",
      "body": ["for ${1:i} in range(${2:10}):", "    print(${1})"],
      "description": "Basic for loop."
    },
    "ifStatement": {
      "prefix": "ifStatement",
      "body": ["if ${1:condition}:", "    ${2:pass}"],
      "description": "If statement."
    },
    "elifStatement": {
      "prefix": "elifStatement",
      "body": ["elif ${1:condition}:", "    ${2:pass}"],
      "description": "Elif statement."
    },
    "elseStatement": {
      "prefix": "elseStatement",
      "body": ["else:", "    ${1:pass}"],
      "description": "Else statement."
    },
    "whileLoop": {
      "prefix": "whileLoop",
      "body": ["while ${1:condition}:", "    ${2:pass}"],
      "description": "While loop."
    },
    "function": {
      "prefix": "function",
      "body": [
        "def ${1:function_name}(${2:params}):",
        "    \"\"\"${3:docstring}\"\"\"",
        "    ${4:pass}"
      ],
      "description": "Define a function."
    },
    "class": {
      "prefix": "class",
      "body": [
        "class ${1:ClassName}(${2:object}):",
        "    \"\"\"${3:docstring}\"\"\"",
        "    def __init__(self, ${4:params}):",
        "        ${5:pass}"
      ],
      "description": "Define a class."
    },
    "tryExcept": {
      "prefix": "tryExcept",
      "body": [
        "try:",
        "    ${1:pass}",
        "except ${2:Exception} as ${3:e}:",
        "    print(f'Error: {${3}}')"
      ],
      "description": "Try-except block."
    },
    "fileRead": {
      "prefix": "fileRead",
      "body": [
        "with open('${1:file.txt}', 'r') as ${2:file}:",
        "    ${3:content} = ${2}.read()"
      ],
      "description": "Read a file."
    },
    "fileWrite": {
      "prefix": "fileWrite",
      "body": [
        "with open('${1:file.txt}', 'w') as ${2:file}:",
        "    ${2}.write('${3:Hello, World!}')"
      ],
      "description": "Write to a file."
    },
    "lambda": {
      "prefix": "lambda",
      "body": "${1:func} = lambda ${2:args}: ${3:expression}",
      "description": "Lambda function."
    },
    "listComprehension": {
      "prefix": "listComprehension",
      "body": "${1:result} = [${2:expression} for ${3:var} in ${4:iterable} if ${5:condition}]",
      "description": "List comprehension."
    },
    "dictComprehension": {
      "prefix": "dictComprehension",
      "body": "${1:result} = {${2:key}: ${3:value} for ${4:key}, ${5:value} in ${6:iterable}.items()}",
      "description": "Dictionary comprehension."
    }
  }
}
